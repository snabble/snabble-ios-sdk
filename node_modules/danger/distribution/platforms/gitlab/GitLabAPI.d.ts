import { RepoMetaData } from "../../dsl/BitBucketServerDSL";
import { api as fetch } from "../../api/fetch";
import { GitLabDiscussionTextPosition, GitLabInlineNote, GitLabMR, GitLabMRChange, GitLabMRCommit, GitLabNote, GitLabUserProfile, GitLabApproval } from "../../dsl/GitLabDSL";
import { Env } from "../../ci_source/ci_source";
export declare type GitLabAPIToken = string;
export declare type GitLabOAuthToken = string;
export interface GitLabAPICredentials {
    host: string;
    token?: GitLabAPIToken;
    oauthToken?: GitLabOAuthToken;
}
export declare function getGitLabAPICredentialsFromEnv(env: Env): GitLabAPICredentials;
declare class GitLabAPI {
    readonly repoMetadata: RepoMetaData;
    readonly repoCredentials: GitLabAPICredentials;
    fetch: typeof fetch;
    private api;
    private readonly hostURL;
    private readonly d;
    constructor(repoMetadata: RepoMetaData, repoCredentials: GitLabAPICredentials);
    get projectURL(): string;
    get mergeRequestURL(): string;
    get apiInstance(): import("gitlab/dist/infrastructure").Mapper<typeof import("gitlab/dist/services"), "Groups" | "GroupAccessRequests" | "GroupBadges" | "GroupCustomAttributes" | "GroupIssueBoards" | "GroupMembers" | "GroupMilestones" | "GroupProjects" | "GroupVariables" | "Epics" | "EpicIssues" | "EpicNotes" | "EpicDiscussions" | "Users" | "UserCustomAttributes" | "UserEmails" | "UserImpersonationTokens" | "UserKeys" | "UserGPGKeys" | "Branches" | "Commits" | "CommitDiscussions" | "ContainerRegistry" | "DeployKeys" | "Deployments" | "Environments" | "Issues" | "IssueAwardEmojis" | "IssueNotes" | "IssueDiscussions" | "Jobs" | "Labels" | "MergeRequests" | "MergeRequestAwardEmojis" | "MergeRequestDiscussions" | "MergeRequestNotes" | "Pipelines" | "PipelineSchedules" | "PipelineScheduleVariables" | "Projects" | "ProjectAccessRequests" | "ProjectBadges" | "ProjectCustomAttributes" | "ProjectImportExport" | "ProjectIssueBoards" | "ProjectHooks" | "ProjectMembers" | "ProjectMilestones" | "ProjectSnippets" | "ProjectSnippetNotes" | "ProjectSnippetDiscussions" | "ProjectSnippetAwardEmojis" | "ProtectedBranches" | "ProtectedTags" | "ProjectVariables" | "PushRules" | "Releases" | "ReleaseLinks" | "Repositories" | "RepositoryFiles" | "Runners" | "Services" | "Tags" | "Triggers" | "Todos" | "ApplicationSettings" | "BroadcastMessages" | "Events" | "FeatureFlags" | "GeoNodes" | "GitignoreTemplates" | "GitLabCIYMLTemplates" | "Keys" | "Licence" | "LicenceTemplates" | "Lint" | "Namespaces" | "NotificationSettings" | "Markdown" | "PagesDomains" | "Search" | "SidekiqMetrics" | "Snippets" | "SystemHooks" | "Version" | "Wikis">;
    getUser: () => Promise<GitLabUserProfile>;
    getMergeRequestInfo: () => Promise<GitLabMR>;
    updateMergeRequestInfo: (changes: object) => Promise<object>;
    getMergeRequestApprovals: () => Promise<GitLabApproval>;
    getMergeRequestChanges: () => Promise<GitLabMRChange[]>;
    getMergeRequestCommits: () => Promise<GitLabMRCommit[]>;
    getMergeRequestNotes: () => Promise<GitLabNote[]>;
    getMergeRequestInlineNotes: () => Promise<GitLabInlineNote[]>;
    createMergeRequestDiscussion: (content: string, position: GitLabDiscussionTextPosition) => Promise<string>;
    createMergeRequestNote: (body: string) => Promise<GitLabNote>;
    updateMergeRequestNote: (id: number, body: string) => Promise<GitLabNote>;
    deleteMergeRequestNote: (id: number) => Promise<boolean>;
    getFileContents: (path: string, slug?: string | undefined, ref?: string | undefined) => Promise<string>;
    getCompareChanges: (base?: string | undefined, head?: string | undefined) => Promise<GitLabMRChange[]>;
    addLabels: (...labels: string[]) => Promise<boolean>;
    removeLabels: (...labels: string[]) => Promise<boolean>;
}
export default GitLabAPI;

import { BaseRequestOptions, BaseService, PaginatedRequestOptions, Sudo } from '../infrastructure';
import { AcceptMergeRequestOptions, CreateMergeRequestOptions, GroupId, MergeRequestId, ProjectId, ShowMergeRequestOptions, UpdateMergeRequestOptions, UserId } from '.';
declare class MergeRequests extends BaseService {
    accept(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: AcceptMergeRequestOptions & BaseRequestOptions): Promise<object>;
    addSpentTime(projectId: ProjectId, mergerequestIId: MergeRequestId, duration: string, options?: Sudo): Promise<object>;
    addTimeEstimate(projectId: ProjectId, mergerequestIId: MergeRequestId, duration: string, options?: Sudo): Promise<object>;
    all({ projectId, groupId, ...options }: ({
        projectId: ProjectId;
    } | {
        groupId: GroupId;
    } | {}) & PaginatedRequestOptions): Promise<import("../infrastructure").GetResponse>;
    approve(projectId: ProjectId, mergerequestIId: MergeRequestId, options: {
        sha?: string;
    } & BaseRequestOptions): Promise<object>;
    approvals(projectId: ProjectId, { mergerequestIId, ...options }: {
        mergerequestIId?: MergeRequestId;
    } & BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    approvers(projectId: ProjectId, approverIds: UserId[], approverGroupIds: GroupId[], { mergerequestIId, ...options }: {
        mergerequestIId?: MergeRequestId;
    } & BaseRequestOptions): Promise<object>;
    cancelOnPipelineSucess(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<object>;
    changes(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    closesIssues(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    commits(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    create(projectId: ProjectId, sourceBranch: string, targetBranch: string, title: string, options?: CreateMergeRequestOptions & BaseRequestOptions): Promise<object>;
    edit(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: UpdateMergeRequestOptions & BaseRequestOptions): Promise<object>;
    editApprovals(projectId: ProjectId, { mergerequestIId, ...options }: {
        mergerequestIId?: MergeRequestId;
    } & BaseRequestOptions): Promise<object>;
    participants(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    pipelines(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    remove(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<object>;
    resetSpentTime(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<object>;
    resetTimeEstimate(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<object>;
    show(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: ShowMergeRequestOptions & BaseRequestOptions): Promise<import("../infrastructure").GetResponse>;
    timeStats(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    version(projectId: ProjectId, mergerequestIId: MergeRequestId, versionId: number, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    versions(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<import("../infrastructure").GetResponse>;
    unapprove(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<object>;
    unsubscribe(projectId: ProjectId, mergerequestIId: MergeRequestId, options?: Sudo): Promise<object>;
}
export default MergeRequests;

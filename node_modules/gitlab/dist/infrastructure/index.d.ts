import * as RequestHelper from './RequestHelper';
import FormData from 'form-data';
export { BaseService } from './BaseService';
export { bundler } from './Utils';
export { KyRequester } from './KyRequester';
export { RequestHelper };
export interface Constructor {
    new (...args: any): any;
}
export declare type Mapper<T extends {
    [name: string]: Constructor;
}, P extends keyof T> = {
    [name in P]: InstanceType<T[name]>;
};
export interface Bundle<T extends {
    [name: string]: Constructor;
}, P extends keyof T> {
    new (options?: any): Mapper<T, P>;
}
export interface Sudo {
    sudo?: string | number;
}
export interface Requester {
    get: Function;
    post: Function;
    put: Function;
    delete: Function;
    stream?: Function;
}
export interface BaseServiceOptions extends Sudo {
    oauthToken?: string;
    token?: string;
    jobToken?: string;
    host?: string;
    url?: string;
    version?: 'v3' | 'v4';
    rejectUnauthorized?: boolean;
    camelize?: boolean;
    requester?: Requester;
    requestTimeout?: number;
}
export interface PaginationOptions {
    total: number;
    next: number | null;
    current: number;
    previous: number | null;
    perPage: number;
    totalPages: number;
}
export interface DefaultRequestOptions extends Sudo {
    body?: object | FormData;
    query?: object;
}
export interface BaseRequestOptions extends Sudo {
    [key: string]: any;
}
export interface PaginatedRequestOptions extends BaseRequestOptions {
    showPagination?: boolean;
    maxPages?: number;
    page?: number;
    perPage?: number;
}
export declare type PaginationResponse = {
    data: object[];
    pagination: PaginationOptions;
};
export declare type GetResponse = PaginationResponse | object | object[];
export declare type PostResponse = object;
export declare type PutResponse = object;
export declare type DelResponse = object;
